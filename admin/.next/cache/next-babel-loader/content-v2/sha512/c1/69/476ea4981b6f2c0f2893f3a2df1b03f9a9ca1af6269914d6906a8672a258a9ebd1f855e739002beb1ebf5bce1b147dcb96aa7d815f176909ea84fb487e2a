{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { HYDRATE, createWrapper } from 'next-redux-wrapper';\nimport thunkMiddleware from 'redux-thunk';\nimport count from './count/reducer';\nimport tick from './tick/reducer';\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    const {\n      composeWithDevTools\n    } = require('redux-devtools-extension');\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nconst combinedReducer = combineReducers({\n  count,\n  tick\n});\n\nconst reducer = (state, action) => {\n  if (action.type === HYDRATE) {\n    const nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n    if (state.count.count) nextState.count.count = state.count.count; // preserve count value on client side navigation\n\n    return nextState;\n  } else {\n    return combinedReducer(state, action);\n  }\n};\n\nconst initStore = () => {\n  return createStore(reducer, bindMiddleware([thunkMiddleware]));\n};\n\nexport const wrapper = createWrapper(initStore);","map":{"version":3,"sources":["/Users/soonsionglim/Development/policystreet/admin/store/store.js"],"names":["createStore","applyMiddleware","combineReducers","HYDRATE","createWrapper","thunkMiddleware","count","tick","bindMiddleware","middleware","composeWithDevTools","require","combinedReducer","reducer","state","action","type","nextState","payload","initStore","wrapper"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,oBAAvC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;;AAEA,MAAMC,cAAc,GAAIC,UAAD,IAAgB;AACrC,YAA2C;AACzC,UAAM;AAAEC,MAAAA;AAAF,QAA0BC,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOD,mBAAmB,CAACT,eAAe,CAAC,GAAGQ,UAAJ,CAAhB,CAA1B;AACD;;AACD,SAAOR,eAAe,CAAC,GAAGQ,UAAJ,CAAtB;AACD,CAND;;AAQA,MAAMG,eAAe,GAAGV,eAAe,CAAC;AACtCI,EAAAA,KADsC;AAEtCC,EAAAA;AAFsC,CAAD,CAAvC;;AAKA,MAAMM,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,MAAIA,MAAM,CAACC,IAAP,KAAgBb,OAApB,EAA6B;AAC3B,UAAMc,SAAS,mCACVH,KADU,GAEVC,MAAM,CAACG,OAFG,CAAf;;AAIA,QAAIJ,KAAK,CAACR,KAAN,CAAYA,KAAhB,EAAuBW,SAAS,CAACX,KAAV,CAAgBA,KAAhB,GAAwBQ,KAAK,CAACR,KAAN,CAAYA,KAApC,CALI,CAKsC;;AACjE,WAAOW,SAAP;AACD,GAPD,MAOO;AACL,WAAOL,eAAe,CAACE,KAAD,EAAQC,MAAR,CAAtB;AACD;AACF,CAXD;;AAaA,MAAMI,SAAS,GAAG,MAAM;AACtB,SAAOnB,WAAW,CAACa,OAAD,EAAUL,cAAc,CAAC,CAACH,eAAD,CAAD,CAAxB,CAAlB;AACD,CAFD;;AAIA,OAAO,MAAMe,OAAO,GAAGhB,aAAa,CAACe,SAAD,CAA7B","sourcesContent":["import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { HYDRATE, createWrapper } from 'next-redux-wrapper'\nimport thunkMiddleware from 'redux-thunk'\nimport count from './count/reducer'\nimport tick from './tick/reducer'\n\nconst bindMiddleware = (middleware) => {\n  if (process.env.NODE_ENV !== 'production') {\n    const { composeWithDevTools } = require('redux-devtools-extension')\n    return composeWithDevTools(applyMiddleware(...middleware))\n  }\n  return applyMiddleware(...middleware)\n}\n\nconst combinedReducer = combineReducers({\n  count,\n  tick,\n})\n\nconst reducer = (state, action) => {\n  if (action.type === HYDRATE) {\n    const nextState = {\n      ...state, // use previous state\n      ...action.payload, // apply delta from hydration\n    }\n    if (state.count.count) nextState.count.count = state.count.count // preserve count value on client side navigation\n    return nextState\n  } else {\n    return combinedReducer(state, action)\n  }\n}\n\nconst initStore = () => {\n  return createStore(reducer, bindMiddleware([thunkMiddleware]))\n}\n\nexport const wrapper = createWrapper(initStore)\n"]},"metadata":{},"sourceType":"module"}